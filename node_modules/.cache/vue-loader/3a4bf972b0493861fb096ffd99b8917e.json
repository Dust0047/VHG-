{"remainingRequest":"/Users/dustinchwalek/Documents/VHG-/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/dustinchwalek/Documents/VHG-/src/views/About.vue?vue&type=template&id=039c5b43&scoped=true&","dependencies":[{"path":"/Users/dustinchwalek/Documents/VHG-/src/views/About.vue","mtime":1622740042000},{"path":"/Users/dustinchwalek/Documents/VHG-/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/dustinchwalek/Documents/VHG-/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/dustinchwalek/Documents/VHG-/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/dustinchwalek/Documents/VHG-/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}